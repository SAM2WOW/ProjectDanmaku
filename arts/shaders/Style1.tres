[gd_resource type="ShaderMaterial" load_steps=10 format=2]

[ext_resource path="res://arts/temp/9b54aeb05d88665c605dd650a643b794.jpg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
function = 34

[sub_resource type="VisualShaderNodeVectorOp" id=6]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorLen" id=7]

[sub_resource type="VisualShaderNodeIf" id=8]
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 1, 1, 1 ) ]

[sub_resource type="VisualShaderNodeTextureUniform" id=13]
uniform_name = "TextureUniform"

[sub_resource type="VisualShader" id=4]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// VectorFunc:4
	vec3 n_out4p0 = vec3(1.0, 1.0, 1.0) - n_out3p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out4p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// TextureUniform:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out9p0 = n_tex_read.rgb;
		n_out9p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -707.881, 49.3224 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 400, 160 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 80, 40 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -580, 160 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -280, 160 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -520, 460 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -300, 480 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -100, 480 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -440, 260 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 2, 0, 6, 0, 7, 0, 7, 0, 8, 0, 2, 0, 0, 0, 9, 1, 0, 1 )

[resource]
shader = SubResource( 4 )
